datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Word {
  id              Int              @id @default(autoincrement())
  swissGerman     String
  german          String?
  spellings       String[]
  dialect         DIALECT
  interpretations Interpretation[]
  audioSamples    AudioSample[]
  createdAt       DateTime         @default(now())
  createdBy       User             @relation(fields: [createdByUserId], references: [id])
  createdByUserId Int
  wordType        WordType?
  grammar         Grammar?

  @@unique([swissGerman, dialect])
}

model Interpretation {
  id              Int       @id @default(autoincrement())
  word            Word      @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId          Int
  meanings        Meaning[]
  upvotes         User[]    @relation("InterpretationUpvotes")
  downvotes       User[]    @relation("InterpretationDownvotes")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId Int
}

model Meaning {
  id               Int            @id @default(autoincrement())
  interpretation   Interpretation @relation(fields: [interpretationId], references: [id], onDelete: Cascade)
  interpretationId Int
  explanation      String
  examples         String[]
}

model User {
  id                       Int              @id @default(autoincrement())
  username                 String           @unique
  email                    String           @unique
  verified                 Boolean          @default(false)
  preferredDialect         DIALECT          @default(OTHER)
  createdWords             Word[]
  audioSamples             AudioSample[]
  createdInterpretations   Interpretation[]
  upvotedInterpretations   Interpretation[] @relation("InterpretationUpvotes")
  downvotedInterpretations Interpretation[] @relation("InterpretationDownvotes")
  password                 String
  sessions                 Session[]
  lastForgotPasswordAt     DateTime?
  lastPasswordResetAt      DateTime?
  createdAt                DateTime         @default(now())
}

model Session {
  token     String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model AudioSample {
  id        String   @id @default(uuid())
  word      Word     @relation(fields: [wordId], references: [id], onDelete: SetNull)
  wordId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int
  path      String
  createdAt DateTime @default(now())
}

// Source: https://als.wikipedia.org/wiki/Schweizerdeutsch
enum DIALECT {
  BASEL
  // BASELBIETER
  AARGAU
  BERN
  // BERNER_OBERLAND
  LUZERN
  OSTSCHWEIZ
  SOLOTHURN
  ZUERICH
  GLARUS
  FREIBURG
  URI
  WALLIS
  OTHER

  @@map("Dialect")
}

// Grammar
model Grammar {
  id     Int  @id @default(autoincrement())
  wordId Int  @unique
  word   Word @relation(fields: [wordId], references: [id])

  nounPlural String?
  nounGender WordGender?

  verbPresentId       Int?             @unique
  verbPresent         VerbConjucation? @relation("present", fields: [verbPresentId], references: [id])
  verbConditionalIId  Int?             @unique
  verbConditionalI    VerbConjucation? @relation("conditional1", fields: [verbConditionalIId], references: [id])
  verbConditionalIIId Int?             @unique
  verbCoditionalII    VerbConjucation? @relation("conditional2", fields: [verbConditionalIIId], references: [id])

  adjectiveComparativ String?
  adjectiveSuperlativ String?
}

model VerbConjucation {
  id                 Int     @id @default(autoincrement())
  firstPerson        String?
  secondPerson       String?
  thirdPerson        String?
  firstPersonPlural  String?
  secondPersonPlural String?
  thirdPersonPlural  String?

  grammar_verbPresent       Grammar? @relation("present")
  grammar_verbConditionalI  Grammar? @relation("conditional1")
  grammar_verbConditionalII Grammar? @relation("conditional2")
}

enum WordType {
  Noun
  Verb
  Article
  Adjective
  Pronoun
  Numeral
}

enum WordGender {
  masculine
  feminine
  neuter
}
